{:profiles
 {:goku {:default true
         :alone   80 ; hold for .. ms to register single tap
         :held    50 ; TODO: not sure what it's for
         :delay   0 ; time after which the key press is delayed
         :sim     30}} ; keys need to be pressed within this threshold to be considered simultaneous
 :templates {:alfred "osascript -e 'tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :open "open \"%s\""
             :open-g "open -g \"%s\""
             :shell "%s"
             :openApp "open -a \"%s\""
             }
 :simlayers {
             :2-mode {:key :2}
             :3-mode {:key :3}
             :4-mode {:key :4}
             :tab-mode {:key :tab}
             :q-mode {:key :q}
             :w-mode {:key :w}
             :e-mode {:key :e}
             :r-mode {:key :r}
             ;:t-mode {:key :t}
             :i-mode {:key :i}
             :o-mode {:key :o}
             :a-mode {:key :a}
             :s-mode {:key :s}
             :d-mode {:key :d}
             :f-mode {:key :f}
             :g-mode {:key :g}
             :semicolon-mode {:key :semicolon}
             :escape-mode {:key :escape}
             ;:backslash {:key :backslash} TODO: for future
             :tilde-mode {:key :grave_accent_and_tilde}
             :z-mode {:key :z}
             ;:x-mode {:key :x}
             :c-mode {:key :c}
             :v-mode {:key :v}
             :b-mode {:key :b}
             :n-mode {:key :n}
             :m-mode {:key :m}
             :comma-mode {:key :comma}
             :dot-mode {:key :period}
             :spacebar-mode {:key :spacebar}
             :ts-mode {:key :period :condi ["in-ts" 1]}
             :rust-mode {:key :period :condi ["in-rust" 1]}
             :swift-mode {:key :period :condi ["in-swift" 1]}
             :go-mode {:key :period :condi ["in-go" 1]}
             :py-mode {:key :period :condi ["in-python" 1]}
             }
 :main [
        {:des "colonkey (shift)"
         :rules [:semicolon-mode
                 [:1 :!T1]
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 ;[:1 [:km "Cursor: clones.workspace"]]
                 ;[:2 [:km "Cursor: src.workspace"]]
                 ;[:3 [:km "Cursor: learn-anything.workspace"]];[:3 :!T3]
                 ;[:4 [:km "Cursor: clones.workspace"]]
                 [:q :!Sq]
                 [:w :!Sw]
                 [:e :!Se]
                 [:r :!Sr]
                 [:t :!St]
                 [:y :!Sy]
                 [:u :!Su]
                 [:i :!Si]
                 [:o :!So]
                 [:p :!Sp]
                 [:a :!Sa]
                 [:s :!Ss]
                 [:d :!Sd]
                 [:f :!Sf]
                 [:g :!Sg]
                 [:h :!Sh]
                 [:j :!Sj]
                 [:k :!Sk]
                 [:l :!Sl]
                 [:grave_accent_and_tilde [:!Sgrave_accent_and_tilde]] ; -> ~
                 [:z :!Sz]
                 [:x :!Sx]
                 [:c :!Sc]
                 [:v :!Sv]
                 [:b :!Sb]
                 [:n :!Sn]
                 [:m :!Sm]]}
        {:des "skey (essential)"
         :rules [:s-mode
                 [:w [:!Oleft_arrow :!OSright_arrow]] ; Highlight word
                 [:e :tab]
                 [:r :!Stab]
                 ;[:u :!COp] ; Selection -> HasteBin link
                 ;[:i :!CTperiod] ; Contexts search active windows ; TODO: maybe replace with alfred/raycast workflow to search active windows to jump to (similar to https://contexts.co)
                 ;[:i [:km "Selected text -> Alfred Snippet"]]
                 ;[:u :!COp] ; Selection -> HasteBin link
                 ;[:i :!COp] ; Selection -> private GitHub gist (with url in clipboard) TODO:
                 [:i [:km "Selected text -> Alfred Snippet"]]
                 [:o :!Cx] ; Cut
                 ;[:open_bracket :!Oleft_arrow]
                 [:open_bracket [:km "Lowercase selected text"]]
                 [:close_bracket [:km "Uppercase selected text"]]
                 [:a :!Cc] ; Copy
                 [:d :delete_or_backspace]
                 [:f :return_or_enter]
                 [:g :!Ctab]
                 [:##h :left_arrow]
                 [:##j :down_arrow]
                 [:##k :up_arrow]
                 [:##l :right_arrow]
                 [:t :!Sreturn_or_enter]
                 ;[:semicolon [:km "Autocomplete"]] ; TODO:
                 [:semicolon [:km "New active todo"]] ; TODO: make LLM try to give hints on making this task, start processing it
                 ;[:semicolon [:km "Selected text -> Alfred Snippet"]]
                 ;[:##semicolon [:km "New active todo"]]
                 [:period [:km "Show active todo"]]
                 ;[:semicolon :!CTO0] ; Search Alfred Snippets
                 [:quote [:!Cleft_arrow :!CSright_arrow]] ; Highlight current line
                 [:c :!Cdelete_or_backspace]
                 [:v :left_shift]
                 [:##b :!Cleft_arrow]
                 [:n :!Cv] ; Paste
                 [:##m :!Cright_arrow]]}
                 ;[:period :!COS0]]} ; TODO: bind to something nice
        {:des "swap : and ;"
        :rules [[:#Psemicolon :!Ssemicolon]
                 [:!Ssemicolon :semicolon]]}
        ; TODO: for some reason if you do it this way, caps lock doesn't always trigger.. makes it unuseable
        ; forced to use simple modification in karabiner GUI (caps_lock -> escape)
        ;{:des "caps (alone) -> escape"
         ;:rules [[:caps_lock ["caps-mode" 1] nil {:afterup ["caps-mode" 0] :alone :escape}]]}
        ;{:des "right cmd -> Alfred"
        ; :rules [[:right_command :right_command nil {:alone :!CTOSspacebar}]]}
        ;{:des "ยง -> Karabiner on/off"
        ; :rules [[:non_us_backslash [:km "Karabiner on/off"]]]}
        {:des "jsim"
         :rules [
                 [[:j :k] [:alfred "search google" "net.deanishe.alfred-searchio"]]
                 [[:j :semicolon] :!COS9] ; Raycast
                 [[:j :l] :!CTOSspacebar] ; Alfred
                 ]}
        {:des "ksim"
         :rules [
                 [[:k :l] [:alfred "search dash" "com.kapeli.dash.workflow"]]
                 [[:k :m] [:alfred "search youtube" "net.deanishe.alfred-searchio"]]
                 ]}
        {:des "2key (move + alfred)"
         :rules [:2-mode
                 ;[:o [:alfred "soulver" "app.soulver.alfredworkflow"]]
                 [:j :!Cdown_arrow]
                 [:k :!Cup_arrow]
                 [:l :!Cright_arrow]
                 [:h :!Cleft_arrow]
                 [:semicolon :!Oup_arrow]
                 [:quote :!Odown_arrow]
                 [:spacebar :!COSu]]} ; Selection -> HN
        {:des "3key (open files + projects)"
         :rules [:3-mode
                 ;[:r [:km "proj: LA"]]
                 ;[:i [:km "edit: Likes"]]
                 [:o [:km "edit: GitHub Bio"]]
                 ;[:o [:km "edit: Projects"]]
                 ;[:t [:km "edit: Git config"]]
                 ;[:g [:km "edit: gitignore global"]]
                 ;[:h [:km "wiki: Used hotkeys"]]
                 [:j [:km "edit: Fish aliases"]]
                 ;[:l [:km "Search current safari url in wiki"]]
                 [:semicolon [:km "proj: Wiki"]]
                 [:quote [:km "wiki: Summary"]]
                 [:n [:km "proj: Dotfiles"]]
                 [:m [:km "proj: Home"]]
                 [:comma [:km "edit: Now"]]
                 [:period [:km "edit: GitHub Bio"]] ; TODO:
                 [:spacebar :!CSOp]]} ; Selection -> Reddit
        {:des "4key (open curated lists)"
         :rules [:4-mode
                 [:r [:km "edit: Web Searches"]]
                 [:t [:km "list: Newsletters"]]
                 [:o [:km "list: Blogs"]]
                 [:p [:km "list: Podcasts"]]
                 [:k [:km "list: Alfred workflows"]]
                 [:l [:km "list: Command line tools"]]
                 [:n [:km "list: Events"]]]}
        {:des "tabkey (things)"
         :rules [:tab-mode
                 [:f [:km "Get time in SF"]]
                 [:t [:km "Save open tabs in safari"]]
                 [:i [[:open "dash://.python:"] ["in-python" 1] ["in-go" 0] ["in-js" 0] ["in-elixir" 0] ["in-rust" 0] ["in-swift" 0]]] ; Python
                 [:j [[:open-g "dash-plugin://query=.tsprofile%3A&prevent_activation=true"] ["in-ts" 1] ["in-rust" 0] ["in-swift" 0] ["in-go" 0] ["in-python" 0]]] ; TS
                 [:k [[:open-g "dash-plugin://query=.rustprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 1] ["in-swift" 0] ["in-go" 0] ["in-python" 0]]] ; Rust
                 [:l [[:open "dash-plugin://query=.swiftprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 0] ["in-swift" 1] ["in-go" 0] ["in-python" 0]]] ; Swift
                 [:semicolon [[:open "dash-plugin://query=.goprofile%3A&prevent_activation=true"] ["in-ts" 0] ["in-rust" 0] ["in-swift" 0] ["in-go" 1] ["in-python" 0]]] ; Go
                 [:s [:km "Open Dash and search docsets"]]]}
        {:des "qkey (cmd + shift)"
         :rules [:q-mode
                 [:3 :!CS3]
                 [:4 :!CS4]
                 [:5 :!CS5]
                 [:6 :!CS6]
                 [:7 :!CS7]
                 [:8 :!CS8]
                 [:9 :!CS9]
                 [:0 :!CS0]
                 [:w :!CSw]
                 [:e :!CSe]
                 [:r :!CSr]
                 [:t :!CSt]
                 [:y :!CSy]
                 [:u :!CSu]
                 [:i :!CSi]
                 [:o :!CSo]
                 [:p :!CSp]
                 [:open_bracket :!CSopen_bracket]
                 [:close_bracket :!CSclose_bracket]
                 [:a :!CSa]
                 [:s :!CSs]
                 [:d :!CSd]
                 [:f :!CSf]
                 [:g :!CSg]
                 [:h :!CSh]
                 [:j :!CSj]
                 [:k :!CSk]
                 [:l :!CSl]
                 [:semicolon :!CSsemicolon]
                 [:quote :!CSquote]
                 [:z :!CSz]
                 [:x :!CSx]
                 [:c :!CSc]
                 [:v :!CSv]
                 [:b :!CSb]
                 [:n :!CSn]
                 [:m :!CSm]
                 [:comma :!CScomma]
                 [:period :!CSperiod]
                 [:slash :!CSslash]
                 [:spacebar :!CSOe]]} ; Selection -> YouTube
                 ;[:spacebar [:km "Explain selected text with ChatGPT or explain .."]]]} ; TODO: make it use my own tool, similar to https://superwhisper.com record window, select text, then stream explain selected text in window
                 ;[:spacebar [:km "Selected text into Google Lucky search"]]]}
                 ;[:spacebar [:km "Explain selected text"]]]} ; TODO: seems not needed, as there is e+spacebar
        {:des "wkey (apps)"
         :rules [:w-mode
                 ;[:t [:km "open: Pitch"]]
                 ;[:t [:km "open: 2Do"]]
                 [:e [:openApp "kitty"]] ; to be moved to LA Todo
                 [:a [:km "open: Notion"]]
                 [:v [:km "open: Obsidian"]] ; LA (everything but todos/calendar)
                 ;[:a [:km "open: Obsidian (first tab focus)"]]
                 ;[:r [:km "open: Spacedrive"]]
                 ;[:t [:km "open: Activity Monitor"]]
                 ;[:i [:km "open: Dropcode"]]
                 ;[:i [:km "open: OBS"]]
                 ;[:i [:km "open: Learn Anything"]]
                 [:o [:km "open: Keyboard Maestro"]]
                 ;[:p [:km "open wip.md with Cursor Nightly"]]
                 [:escape [:km "open: Finder"]]
                 ;[:r [:km "open: SQLiteFlow"]] ; TODO: move to personal EdgeDB
                 [:f [:km "open: Things"]] ; TODO: LA todos (separate app ideally) (show today calendar on right, same quality as Fantastical/Amie) (on left 2Do/Things/Linear/Ship like!)
                 ;[:r [:km "open: Things"]]
                 [:r [:km "open: 1Password"]]
                 ;[:t [:km "open: Notes"]]
                 ;[:d [:km "open: Music"]]
                 ;[:d [:km "open: Day One"]]
                 [:d [:km "open: SnippetsLab"]]
                 ;[:d [:km "open: System Settings"]]
                 ;[:g [:km "Journal"]] ; TODO: complete to use LA
                 ;[:h [:km "open: Notes"]]
                 ;[:f [:km "open: Learn Anything"]]
                 ;[:d [:km "open: Postico"]]
                 ;[:d [:km "open: TablePlus"]]
                 ;[:d [:km "open: Beekeepr Studio Ultimate"]]
                 ;[:g [:km "open: KusKus"]]
                 ;[:g [:km "open: Height"]]
                 ;[:h [:km "open: Things"]]
                 [:j [:km "open: Warp"]]
                 [:k [:km "open: Safari"]]
                 [:l [:km "open: Cursor Nightly"]]
                 [:semicolon [:km "open: Cursor"]]
                 [:period [:km "open: Xcode"]]
                 ;[:semicolon [:km "open: Cursor"]]
                 ;[:quote [:km "Open src.code-workspace and learn-anything.code-workspace"]]
                 ;[:quote [:km "Open learn-anything.code-workspace"]]
                 [:c [:km "open: Spotify"]]
                 ;[:n [:km "open: Obsidian"]]
                 ;[:v [:km "open: TablePlus"]]
                 ;[:v [:km "open: RapidAPI"]]
                 [:b [:km "open: BetterTouchTool"]]
                 ;[:n [:km "open: Learn Anything (prefer dev)"]]
                 [:n [:km "open: Pathfinder"]]
                 [:m [:km "open: Sublime Merge"]]
                 ;[:i [:km "open: Hoppscotch"]]
                 [:i [:km "open: Bruno"]]
                 [:comma [:km "open: Proxyman"]]
                 [:slash [:km "open: Instruments"]]
                 ;[:period [:km "open: Bruno"]]
                 ;[:period [:km "open: Zed"]]
                 ;[:period [:km "open: Xcode"]]
                 ;[:period [:km "open: Xcode (beta)"]]
                 [:spacebar [:km "open: Linear"]]]}
                 ;[:spacebar [:km "open: TablePlus"]]]}
                 ;[:spacebar [:km "open: Dash"]]]}
                 ;[:spacebar [:km "open: Beekeepr Studio Ultimate"]]]}
                 ;[:period [:km "open: Commander One"]]
                ;;  [:spacebar :!CT7]]} ; Start Google search with selection
                 ;[:spacebar [:km "open: Learn Anything"]]]}
                 ;[:spacebar [:km "Explain with ChatGPT"]]]}
                 ;[:spacebar [:km "open: Zen"]]]}
                 ;[:spacebar [:km "Explain with Ask"]]]}
        {:des "ekey (cmd)"
         :rules [:e-mode
                 [:q :!Cq]
                 [:w :!Cw]
                 [:r :!Cr]
                 [:t :!Ct]
                 [:u :!Cu]
                 [:i :!Ci]
                 [:p :!Cp]
                 [:open_bracket :!Copen_bracket]
                 [:close_bracket :!Cclose_bracket]
                 [:semicolon :!Csemicolon]
                 [:quote :!Cquote]
                 [:comma :!Ccomma]
                 [:period :!Cperiod]
                 [:slash :!Cslash]
                 [:a :!Ca]
                 [:b :!Cb]
                 [:c :!Cc]
                 [:d :!Cd]
                 [:f :!Cf]
                 [:g :!Cg]
                 [:h :!Ch]
                 [:j :!Cj]
                 [:k :!Ck]
                 [:l :!Cl]
                 [:m :!Cm]
                 [:n :!Cn]
                 [:o :!Co]
                 [:s :!Cs]
                 [:v :!Cv]
                 [:x :!Cx]
                 [:y :!Cy]
                 [:z :!Cz]
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 [:7 :!C7]
                 [:8 :!C8]
                 [:9 :!C9]
                 [:0 :!C0]
                 ;[:spacebar [:km "Explain selected text (or open ChatGPT Explain)"]]]}
                 [:spacebar [:km "Explain selected text (or open Claude Explain)"]]]}
                 ;[:spacebar :!CSO7]]} ; Selection -> Google Lucky TODO: no work..
        {:des "rkey (apps)"
         :rules [:r-mode
                 [:tab [:km "open: Transmission"]]
                 [:q [:km "open: IINA"]]
                 [:w [:km "open: 1Password"]]
                 ;[:e [:km "open: Keynote"]]
                 ;[:i [:km "open: Flume"]]
                 ;[:i [:km "open: Feedback Assistant"]]
                 ;[:o [:km "open: Developer"]]
                 ;[:i [:km "open: NetNewsWire"]]
                 ;[:escape [:km "open: Preview"]]
                 [:escape [:km "open: IINA"]]
                 [:a [:km "open: Alfred Preferences"]]
                 [:j [:km "open: Preview"]]
                 [:k [:km "open: Reader"]]
                 [:l [:km "open: Dictionary"]]
                 ;[:l [:km "Open Reader with Nightly TS- workspace split 50/50"]]
                 ;[:semicolon [:km "open: Day One"]]
                 ;[:semicolon [:km "open: Crouton"]]
                 ;[:l [:km "open: Books"]]
                 ;[:l [:km "open: Reflect"]]
                 ;[:k [:km "open: PDF Expert"]]
                 ;[:l [:km "open: Reeder"]]
                 [:b [:km "Edit keyboard shortcuts"]]
                 ;[:n [:km "open: ScreenFlow"]]
                 ;[:m [:km "open: Music"]]
                 [:comma [:km "open: Arq"]]
                 [:period [:km "open: Preview"]]
                 ;[:period [:km "open: Final Cut Pro"]]
                 ;[:spacebar :!COSx]]} ; Selection -> Reddit
                 [:spacebar [:km "Copied image into ChatGPT"]]]}
        {:des "tkey (palettes + websites)"
         :rules [:t-mode
                 ;[:0 [:km "w: regex101"]]
                 ;[:e [:km "w: Facebook"]]
                 ;[:u [:km "w: Medium"]]
                 ;[:i [:km "w: Arxiv"]]
                 ;[:o [:km "w: Stack Overflow"]]
                 ;[:p [:km "w: Dropbox"]]
                 ;[:a [:km "w: Amazon"]]
                 ;[:h [:km "w: Twitch"]]
                 ;[:k [:km "Get link (Safari Technology Preview)"]]
                 ;[:j :!COSo] ; Safari URL -> Twitter
                 ;[:j :!COSo] ; Safari URL -> Google
                 ;[:k :!COSo] ; Safari URL -> HN
                 ;[:l :!COSo] ; Safari URL -> Lobsters
                 ;[:semicolon [:km "w: Netlify"]]
                 ;[:z [:km "w: MDN"]]
                 ;[:b [:km "w: Observable"]]
                 ;[:m [:km "w: Meetup"]]
                 ;[:comma [:km "w: Google Drive"]]
                 ;[:period [:km "w: IFTTT"]]
                 ;[:spacebar :!COSr]]} ; Selection -> Google Translate
                 [:spacebar :!CTOSi]]} ; Loom cancel record
        {:des "ikey (symbols)"
         :rules [:i-mode
                 [:1 :!S1]
                 [:2 :!S2]
                 [:3 :!Sequal_sign]
                 [:4 :!S8]
                 [:5 :!S5]
                 [:q :!Sopen_bracket]
                 [:w :!S9]
                 [:e :!S3]
                 [:r :!Squote]
                 [:t :quote]
                 [:o :open_bracket] ; [
                 [:p :close_bracket] ; ]
                 [:open_bracket :!Sclose_bracket] ; }
                 [:caps_lock [:km "Match symbols"]]
                 [:a :slash]
                 [:s :!Shyphen]
                 [:d :backslash]
                 [:f :hyphen]
                 [:g :!S4]
                 [:h [:km "paste: โฌ"]]
                 [:j :equal_sign]
                 [:l [:hyphen :!Speriod :spacebar]] ; -> arrow (->)
                 [:semicolon :semicolon]
                 [:grave_accent_and_tilde :!Sgrave_accent_and_tilde] ; -> //
                 [:z :!Sslash]
                 [:x :!Sbackslash]
                 [:c :!S7]
                 [:v :!Scomma]
                 [:b [:slash :slash :spacebar]]]} ; -> //
        {:des "okey (alfred)"
         :rules [:o-mode
                 [:1 :!C1]
                 [:2 :!C2]
                 [:3 :!C3]
                 [:4 :!C4]
                 [:5 :!C5]
                 [:6 :!C6]
                 ;[:w :!CObackslash] ; 1Password search
                 ;[:w :!CObackslash] ; 1Password search
                 ;[:e [:km "Make 2Do task"]]
                 [:escape [:km "1Password Search"]]
                 ;[:w [:km "open: Cloudflare Dashboard"]]
                 ;[:w [:km "open: Dash (search off)"]]
                 ;[:e [:km "open: Dash (with search)"]]
                 ;[:e [:km "open: ChatGPT GPTs"]]
                 ;[:q [:km "open: Midjourney"]]
                 ;[:w [:km "open: Gemini"]]
                 ;[:q [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 [:d [:km "open: EdgeDB Cloud"]]
                 [:j [:km "open: ChatGPT"]]
                 [:e [:km "open: Cloudflare"]]
                 ;[:e [:km "open: Typefully"]]
                 ;[:e [:km "Make 2Do task"]]
                 ;[:r [:km "Make 2Do task with note as current URL"]]
                 ;[:t [:km "Make 2Do task with Safari title as name + note as current URL"]]
                 ;[:i [:alfred "search alfred" "nikivi.utilities" "?"]]
                 ;[:i [:km "Search Dash app"]]
                 ;[:i [:km "open: Dash (with search)"]]
                 ;[:caps_lock [:alfred "search desktop" "com.vitorgalvao.alfred.directories"]]
                 [:a :!TOSw] ; Notion Command Search
                 [:d [:alfred "search files" "nikivi.manage.notes"]] ; TODO: (make it open in obsidian)
                 ;[:s [:alfred "search code" "nikivi.manage.notes"]]
                 [:s [:alfred "search folders" "nikivi.search.folders"]]
                 ;[:d [:alfred "search repos" "net.deanishe.alfred-git-repos"]]
                 [:w [:alfred "search downloads" "recentdownloads.ddjfreedom"]]
                 [:f [:km "open: Perplexity"]]
                 [:g [:km "open: Grafbase"]]
                 ;[:g [:km "2Do with current url as note (github)"]]
                 [:i [:alfred "run" "iansinnott.keyboardmaestro"]]
                 ;[:j [:alfred "search dash" "com.kapeli.dash.workflow"]]
                 ;[:j [:km "open: SnippetsLab"]]
                 ;[:j [:km "open: Typefully"]]
                 [:k [:alfred "search menu bar" "com.tedwise.menubarsearch"]]
                 [:grave_accent_and_tilde [:alfred "search processes" "com.vitorgalvao.alfred.processcontrol"]]
                 [:x [:alfred "search workflows" "org.jeef.workflowdirectory"]]
                 [:c [:alfred "search emoji" "com.github.jsumners.alfred-emoji"]]
                 [:v [:alfred "search clones" "com.vitorgalvao.alfred.directories"]]
                 ;[:b [:km "Add 2Do with current url as note (github)"]]
                 [:n :!CTOS9] ; search npm packages
                 [:z :!TCspacebar] ; macOS Emoji Picker
                 ;[:n [:alfred "search lists" "nikivi.learn.anything"]]
                 ;[:m [:alfred "search lists" "nikivi.awesome.lists"]]
                 ;[:spacebar [:alfred "search PDFs" "nikivi.search.files"]]]}
                 [:spacebar [:km "open: Claude"]]]}
                 ;[:spacebar [:km "open: Ask"]]]}
        ;; TODO: not used, move it to other keys, whatever is useful
        ;{:des ".."
         ;:rules [:caps-mode
                  ;[:s [:km "paste: โจ"]]
                  ;[:j [:km "paste: Thanks โฅ๏ธ"]]
                  ;[:n [:!Sn :i :k :i :t :a]] ; -> Nikita
                  ;;[:period [:t :h :a :n :k :spacebar :y :o :u]] ; -> thank you
                  ;[:period [:!St :h :a :n :k :spacebar :y :o :u :period :spacebar]] ; -> Thank you.
                  ;[:u [:u :p :d :a :t :e :spacebar]] ; -> update
                  ;[:p [:p :l :e :a :s :e :spacebar]] ; -> please
                 ;;[:1 [:alfred "Screenshot -> Imgur" "com.vitorgalvao.alfred.webscreenshot"]]
                 ;;[:2 :!TO2] ; Screenshot -> Clipboard
                 ;;[:3 :!TO3] ; Screenshot -> Annotate
                 ;;[:4 :!TO9] ; Picture of screen -> Clipboard
                 ;;[:5 :!TO0] ; Picture of screen -> ~/Desktop
                 ;;[:w [:km "wiki: My workflow"]]
                 ;;[:e [:km "edit: Private notes"]]
                 ;;[:r [:km "wiki: Rules"]]
                 ;;[:t [:km "wiki: Processes"]]
                 ;;[:u [:km "Open 2Do Buy"]]
                 ;;[:i [:km "Open 2Do Fix"]]
                 ;;[:o [:km "Open 2Do Tools"]]
                 ;;[:p [:km "Open 2Do Repeat"]]
                 ;;[:open_bracket [:km "w: Goodreads (currently reading)"]]
                 ;;[:close_bracket [:km "w: Goodreads (next)"]]
                 ;;[:s [:km "Open 2Do Wiki"]]
                 ;;[:d [:open "notion://nikitavoloboev/Ideas-0b5a4e8a88f34fe29a1f33dad02e5332"]]
                 ;;[:f [:km "Search 2Do"]]
                 ;;[:g [:km "Open 2Do Life"]]
                 ;;[:h [:open "notion://nikitavoloboev/Learn-05c0eac7be904e0da89cd8a3bf7ab509"]]
                 ;;[:j [:km "Open 2Do Today"]]
                 ;;[:k [:km "Open 2Do GitHub"]]
                 ;;[:l [:km "Open 2Do Later"]]
                 ;;[:semicolon [:km "Open 2Do Starred"]]
                 ;;[:quote [:km "Open 2Do Other"]] ; TODO: remove once its empty
                 ;;[:c [:km "Look back"]]
                 ;;[:v [:km "wiki: Goals"]]
                 ;;[:b [:open "notion://nikitavoloboev/Papers-Courses-8f00c7c500d5460490a5800c5d5db431"]]
                 ;;[:n [:km "Open 2Do Clean"]]
                 ;;[:m [:km "Open 2Do Work"]]
                 ;;[:comma [:km "Open 2Do LA"]]
                 ;[:semicolon [:km "paste: โฅ๏ธ"]] ; -> โฅ๏ธ
                 ;[:period [:km "Open 2Do Recent"]]]}
        {:des "akey (ctrl)"
         :rules [:a-mode
                 [:2 :!T2]
                 [:3 :!T3]
                 [:4 :!T4]
                 [:5 :!T5]
                 [:6 :!T6]
                 [:7 :!T7]
                 [:8 :!T8]
                 [:9 :!T9]
                 [:0 :!T0]
                 [:q :!Tq]
                 [:w :!Tw]
                 [:e :!Te]
                 [:r :!Tr]
                 [:t :!Tt]
                 [:i :!Ti]
                 [:o :!To]
                 [:y :!Ty]
                 [:u :!Tu]
                 [:p :!Tp]
                 [:open_bracket :!Topen_bracket]
                 [:close_bracket :!Tclose_bracket]
                 [:s :!Ts]
                 [:d :!Td]
                 [:f :!Tf]
                 [:g :!Tg]
                 [:h :!Th]
                 [:j :!Tj]
                 [:k :!Tk]
                 [:l :!Tl]
                 [:semicolon :!Tsemicolon]
                 [:quote :!Tquote]
                 [:z :!Tz]
                 [:x :!Tx]
                 [:c :!Tc]
                 [:v :!Tv]
                 [:b :!Tb]
                 [:n :!Tn]
                 [:m :!Tm]
                 [:comma :!Tcomma]
                 [:period :!Tperiod]
                 [:slash :!Tslash]
                 [:spacebar :!CT9]]} ; Selection -> Google
        {:des "dkey (mouse)"
         :rules [:d-mode
                 [:i :!Ckeypad_hyphen] ; Zoom out
                 [:o :!Ckeypad_plus] ; Zoom in
                 [:a [:!Cc :!Ctab]] ; Copy & activate previous app
                 [:j {:mkey {:vwheel 60}}] ; Scroll down
                 [:k {:mkey {:vwheel -60}}] ; Scroll up
                 [:l [:km "Google clipboard"]]
                 ;[:l [:km "Google selected word"]]
                 [:semicolon [:km "Google Searchio selected word"]]
                 [:quote [:km "Select line and google"]]
                 [:z {:pkey :button2}] ; Right click
                 [:v {:pkey :button1}] ; Left click
                 [:b {:pkey :button3}] ; Middle click
                 [:n [:km "Open URL in clipboard in Safari"]]
                 [:m [:km "Google Lucky selected word"]]
                 [:comma :!TOS1] ; Show Launchpad (system settings > keyboard > launchpad & dock)
                 [:period :!TOS2] ; Mission Control (system settings > keyboard > mission control)
                 [:spacebar :!CT8]]} ; Selection -> Dictionary (wiki)
        {:des "fkey (essential)"
         :rules [:f-mode
                 [:1 [:km "View Sip"]]
                 [:3 [:km "New global macro"]] ; TODO: create global macro from Test (clear test, focus on naming new macro)
                 [:tab [:km "Go to test macro"]]
                 ;[:q [:km "open: Photos"]]
                 [:escape [:km "open: Pixave"]]
                 ;[:q [:km "open: Cosmos"]]
                 ;[:s [:km "open: Excalidraw"]]
                 [:s :!TOSe] ; Start Superwhisper transcription
                 ;[:q [:km "Clear active todo"]]
                 ;[:q [:km "open: Framer"]]
                 [:q [:km "open: Midjourney"]]
                 [:w [:km "open: Figma"]]
                 [:grave_accent_and_tilde [:km "Test"]]
                 [:e :!CO8] ; Alfred clipboard history search
                 [:r [:km "Centre mouse to active app"]]
                 [:p :!CTOc] ; Sleep
                 [:open_bracket :!CT5] ; Turn display on/off
                 ;[:escape :!CTOu] ; Sip color picker
                 [:a [:km "open: Chrome Canary"]]
                 ;[:s :!TOS8] ; Move focus to status menus (show menu bar) (system settings > keyboard > keyboard)
                 ;[:s :!TOSe] ; Start Superwhisper transcription
                 ;[:s [:km "open: Simulator"]]
                 ;[:s [:km "open: Spline"]]
                 ;[:s [:km "open: Simulator"]]
                 ;[:s [:km "open: Learn Anything (dev)"]] ; TODO: make it work on any tauri dev app (KusKus + future tauri dev apps)
                 ;[:a [:km "open: Chrome Canary"]]
                 ;[:s [:km "edit: 2nd Warp tab"]]
                 ;[:escape [:km "open: Draw my UI"]]
                 [:grave_accent_and_tilde [:km "Test"]]
                 ;[:n :!STh] ; Record macro TODO: rebind it
                 [:n [:km "New Linear task"]]
                 ;[:grave_accent_and_tilde [:km "open: Excalidraw"]]
                 ;[:s [:!TOreturn_or_enter :!Cs]]
                 ;[:s [:km "open: Eagle"]]
                 [:s [:km "open: Learn Anything (dev)"]] ; TODO: focus on tauri windows in general, dev more tauri apps. or better focus on simulator if it's open or tauri window if that is open
                 ;[:d [:km "Save app state (Safari = top link, etc.)"]]
                 [:h [:km "Make markdown link from selection {link}"]]
                 ;[:j [:km "edit: 1st Warp tab"]]
                 ;[:j [:!Sreturn_or_enter :!Cs]]
                 ;[:j [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 ;[:j :!CTO0] ; Search Alfred Snippets
                 ;[:j [:km "open: Learn Anything (dev)"]]
                 [:i :!Treturn_or_enter]
                 [:o :!Oreturn_or_enter]
                 [:k :return_or_enter]
                 [:l :!Creturn_or_enter]
                 ;[:semicolon [:km "open: Simulator"]]
                 ;[:semicolon [:km "open: Learn Anything Web"]]
                 ;[:semicolon [:km "New 2Do task"]] ; TODO: replace with nice native modal to do new todo. cmd+return on it moves it to `active todo` and tracks in LA Todo
                 ;[:semicolon [:km "open: Learn Anything Web"]]
                 ;[:semicolon [:escape :!Sa :semicolon :return_or_enter]]
                 ;[:semicolon [:km "open: MindNode"]]
                 ;[:semicolon [:km "New todo"]]
                 ;[:semicolon [:km "Show active todo"]]
                 ;[:quote [:km "Goku Run"]]
                 ;[:quote [:km "edit: Fish functions and alias"]]
                 [:semicolon [:km "New Things task (Today)"]]
                 ;[:semicolon :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 ;[:semicolon [:km "Show active todo (clear todo and go to 2Do if activated again within 3 seconds)"]]
                 [:j :!TSspacebar] ; Things Quick Entry
                 [:z :!Ospacebar] ; Switch language (Russian <-> English)
                 [:n :!Freturn_or_enter]
                 [:m :!Sreturn_or_enter]
                 [:comma  [:km "Add safari link to selected markdown text"]]
                 ;[:comma [:km "edit: Fish Functions"]]
                 [:period [:km "edit: Karabiner"]]
                 [:slash :!CTO4] ; Alfred file action
                 ;[:spacebar :!CTq]]} ; Selection -> Web Searches
                 ;[:spacebar [:km "Move selected text to ChatGPT or select area screenshot to ChatGPT"]]]}
                 [:spacebar [:km "Move selected text to Claude or select area screenshot to Claude"]]]}
                 ;[:spacebar [:km "open: Eagle"]]]}
                 ;[:spacebar [:km "Copy text to ChatGPT"]]]}
        {:des "gkey (actions)"
         :rules [:g-mode
                 ;[:q :!CT3] ; Search bartender menu items
                 [:w :!CSgrave_accent_and_tilde] ; Switch between active windows (go up)
                 [:caps_lock [:km "Go to KM group of current app from picklist"]]
                 [:a [:km "Go to KM group of current app"]]
                 [:s [:km "Dismiss notifications"]]
                 [:h :!CSOa] ; Move window left
                 ;[:j :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 [:j [:km "New global macro"]] ; TODO: create global macro from Test (clear test, focus on naming new macro)
                 ;[:j [:km "New open app's macro"]] ; TODO: macro that will start a new macro in currently open app KM group
                 [:k :!COSf] ; Maximize window
                 [:l :!CSOd] ; Move window right
                 ;[:semicolon :!COSs] ; Move window to right desktop
                 [:semicolon :!COSs] ; Move window between different screen & maximize
                 ;[:z :!CO0] ; Show Dropzone dropdown
                 [:u :!TOS7] ; Move focus to the Dock (system settings > keyboard > keyboard)
                 [:i :!TOS6] ; Move focus to the menu bar (system settings > keyboard > keyboard)
                 [:o :!CSslash] ; Search menu bar (can also jump around menu bar items after with left/right arrow)
                 [:n :!TOS4] ; Turn Do Not Disturb on/off (system settings > keyboard > mission control)
                 [:m :!TOS3] ; Show Notification Centre (system settings > keyboard > mission control)
                 [:period :!Tdown_arrow] ; Application Windows (system settings > keyboard > mission control)
                 [:comma :!TOS5] ; Show Desktop (system settings > keyboard > mission control)
                 [:quote :!COS6]]} ; Toggle Night Shift on/off.
        {:des "capskey (paste)"
         :rules [:escape-mode
                  [:w [:km "paste: personal nikita.vo@ email"]]
                  [:e [:km "paste: personal nikita@ email"]]
                  [:r [:km "paste: ๐"]]
                  [:s [:km "paste: โจ"]]
                  ;[:j [:km "paste: Thanks โฅ๏ธ"]]
                  ;[:j [:km "paste: thanks"]]
                  [:j [:km "paste: Thanks ๐ค"]]
                  [:k [:km "paste: That worked ๐ค"]]
                  ;[:k [:km "paste: Thank you."]]
                  [:l [:km "paste: Cal.com (15 min)๏ธ"]]
                  [:m [:km "paste: Cal.com (30 min)๏ธ"]]
                  [:c [:km "paste: ๐ฟ"]]
                  [:v [:km "paste: ๐"]]
                  [:h [:km "paste: ๐บ"]]
                  [:f [:km "paste: explain"]]
                  [:semicolon [:km "paste: ๐ค"]]
                  ;[:period [:km "paste: that worked ๐ค"]]
                  [:g [:km "paste: Telegram (personal)๏ธ"]]
                  ;[:n [:km "paste: Nikita"]]
                  [:n [:km "paste: nikitavoloboev"]]
                  [:u [:km "paste: update"]]
                  [:p [:km "paste: please"]]
                  [:spacebar [:km "Selected text into Google Lucky search"]]]}
        {:des "tilkey (code switches + websites)"
         :rules [:tilde-mode
                 ;[:w [:alfred "toggle wifi" "nikivi.wifi.tools"]]
                 ;[:r [:alfred "restart wifi" "nikivi.wifi.tools"]]
                 ;[:d [:km "Do debug build of LA"]]
                 [:v :left_shift]
                 [:##j :!Cdown_arrow]
                 [:##k :!Cup_arrow]
                 [:##l :!Cright_arrow]
                 [:##h :!Cleft_arrow]
                 [:##semicolon :!Oup_arrow]
                 [:##quote :!Odown_arrow]
                 [:##n :!Oleft_arrow]
                 [:##m :!Oright_arrow]
                 [:i [:km "w: Iconic"]]
                 ;[:w [:km "w: Cloudflare Workers & Pages"]]
                 ;[:e [:km "w: Baselime LA logs"]]
                 ;[:f [:km "w: Cloudflare LA deployments"]]
                 ;[:g [:km "w: Grafbase LA logs"]]
                 ;[:v [:km "w: Pitch"]]
                 [:spacebar :!COSn]]} ; Selection -> GitHub
        {:des "zkey (chat)"
         :rules [:z-mode
                 [:e [:km "open: Telegram"]]
                 ;[:i [:km "open: WhatsApp"]]
                 ;[:o [:km "open: FaceTime"]]
                 ;[:d [:km "New Spark email"]]
                 ;[:o [:km "open: Around"]]
                 [:d [:km "open: Mimestream"]]
                 [:f [:km "open: Spark"]]
                 [:g [:alfred "search contacts" "nikivi.search.content"]]
                 [:h [:km "Create new contact"]]
                 [:j [:km "open: Discord"]]
                 [:k [:km "open: Telegram"]]
                 ;[:l [:km "open: Quill"]]
                 [:l [:km "open: X Pro"]]
                 [:semicolon [:km "open: Slack"]]
                 [:c [:km "open: Contacts"]]
                 [:v [:km "open: Mimestream"]]
                 [:n [:km "open: Signal"]]
                 [:m [:km "open: Element"]]
                 ;[:b [:km "w: Twitter"]]
                 ;[:n [:km "w: Typefully"]]
                 ;[:n [:km "w: Twitter Compose"]]
                 ;[:m [:km "w: Twitter Compose with current URL pasted"]]
                 [:period [:km "w: Twitter Search"]]
                 [:spacebar :!CSOz]]} ; Selection -> Twitter
        {:des "xkey (spotify)"
         :rules [:x-mode
                 [:o [:km "Paste current Spotify song link"]]
                 [:open_bracket [:alfred "twitter_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:close_bracket [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Add song to Bliss playlist
                 [:j [:alfred "show_alfred_playlist" "com.vdesabou.spotify.mini.player"]]
                 [:k [:alfred "show_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:semicolon [:alfred "add_current_track_to_alfred_playlist_or_your_music" "com.vdesabou.spotify.mini.player"]] ; Add song to Likes playlist
                 [:quote [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Add song to Focus playlist
                 [:n [:alfred "add_current_track_to" "com.vdesabou.spotify.mini.player"]]
                 [:m [:alfred "remove_current_track_from" "com.vdesabou.spotify.mini.player"]]
                 ;[:comma [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]] ; TODO: twitter search
                 [:comma [:alfred "show_search_online" "com.vdesabou.spotify.mini.player"]] ; TODO: split up further into binds for direct searches of tracks/artists/all
                 [:period [:alfred "youtube_search_current_track" "com.vdesabou.spotify.mini.player"]]
                 [:slash [:alfred "reddit_search_current_track" "com.vdesabou.spotify.mini.player"]]]}
        {:des "ckey (files/websites)"
         :rules [:c-mode
                 [:tab [:km "proj: Learning"]]
                 ;[:u [:km "run: Rust"]]
                 ;[:i [:km "run: Julia"]] ; TODO: maybe use Pluto.jl notebook
                 ;[:o [:km "run: Deno"]]
                 ;[:a [:km "Clone repo to ~/clones and open with Zed"]]
                 [:a [:km "Clone repo to ~/clones and open with Cursor"]]
                 [:s [:km "Clone repo to ~/clones"]]
                 ;[:d [:km "Clone repo to ~/src/clones and open with VS Code"]] ; TODO: open with Xcode
                 ;[:j [:km "run: Bash"]]
                 ;[:k [:km "run: Go"]]
                 ;[:l [:km "run: Python"]]
                 [:i [:km "edit: Python"]]
                 [:o [:km "edit: Go"]]
                 [:j [:km "edit: TS"]]
                 [:k [:km "edit: Rust"]]
                 [:l [:km "edit: Solid"]]
                 ;[:k [:km "edit: TS todo"]]
                 [:semicolon [:km "edit: Fish functions and alias"]]
                 [:period [:km "edit: Fish config"]]
                 ;[:semicolon [:alfred "search learning" "nikivi.private.directories"]]
                 ;[:quote [:km "proj: Go"]]
                 ;[:n [:km "run: Node"]]
                 ;[:m [:km "run: Swift"]]
                 [:comma [:km "edit: Config todo"]]
                 ;[:period [:km "edit: LA todo"]]
                 [:slash [:km "edit: KusKus todo"]]
                 ;[:period [:km "edit: Dotfiles Magefile"]]
                 ;[:j :!SOTw] ; Replies
                 ;[:k :!SOTf] ; App specific
                 ;[:l :!SOTr] ; Personal
                 ;[:o [:km "Lowercase and dash separate text"]]
                 ;[:j [:km "w: nikiv.dev"]]
                 ;[:k [:km "w: GitLab"]]
                 ;[:l [:km "w: Repl.it"]]
                 ;[:period [:km "w: CodeSandbox"]]]}
                 [:spacebar :!CSOy]]} ; Selection -> Stack Overflow
        {:des "vkey (media)"
         :rules [:v-mode
                 [:q :illumination_decrement]
                 [:w :illumination_increment]
                 [:e [:km "Change macOS appearance (dark/light)"]]
                 [:i :display_brightness_decrement]
                 [:o :display_brightness_increment]
                 [:p [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:37i9dQZEVXcMHpP6EcIqNe"]] ; Discover Weekly
                 [:open_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ERn0U4qZIKC8Dy7RrMMsn"]] ; Likes
                 [:close_bracket [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:2N82DnDsPGMnpJhN8sVFJu"]] ; Bliss
                 [:escape [:km "open: Endel"]]
                 [:a [:km "Play/Pause Endel"]]
                 ;[:a [:open "raycast://extensions/mattisssa/spotify-beta/search"]] ; Raycast Spotify Search
                 ;[:escape [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4F0sgXdji5yB1Gb9daWwqy"]] ; the focus song
                 [:s [:km "Play/Pause Spotify"]]
                 [:d [:km "Repeat Spotify song"]] ; TODO: do in background
                 ;[:d :!CO9] ; Connect/disconnect AirPods
                 [:h :vk_consumer_previous]
                 [:j :mute]
                 [:k :vk_consumer_play]
                 [:l :vk_consumer_next]
                 [:semicolon [:alfred "spot_mini" "com.vdesabou.spotify.mini.player"]]
                 [:quote [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:5fIL0WiQ79QtgsP4Y4L20V"]] ; Inspired
                 [:backslash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3zy0JafsRQJgAMU67hnjYX"]] ; Focus Get Hyped
                 [:grave_accent_and_tilde [:alfred "artist_radio" "com.vdesabou.spotify.mini.player"]]
                 [:z [:alfred "song_radio" "com.vdesabou.spotify.mini.player"]]
                 [:b [:alfred "show_playlists" "com.vdesabou.spotify.mini.player"]]
                 [:n :volume_decrement]
                 [:m :volume_increment]
                 ;[:comma [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:0ESjwZeTcHOWzY3FYO5zs5"]] ; Focus
                 ;[:comma [:km "Play Spotify local song"]]
                 [:comma [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:playlist:1V6E19oxBxrOHYRkNYLlm5"]] ; Offline
                 [:period [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3R38IXWFcoxYBdUkmxaoyy"]] ; Rain
                 [:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4G0m7oplySbleIlWeLu3vH"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:58FDTnjuNlUMyLY1airrrD"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:2lF5acSU8Vu9292cthQmc5"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:3jI7Yeg7a2d7BMc8CxABVM"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:6eKOshIu2rtjm3HivUaCWh"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4tnWEXeAgZWTRULCkJ6IGL"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:5f5S32oPDjAUzBpOaNXFzV"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:4iORPRB30LonHaKwkctjyE"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:52o0rOFFGNEekY4o0xV0AK"]] ; Focus song
                 ;[:slash [:alfred "play" "com.vdesabou.spotify.mini.player" "spotify:track:493uQXwZsTDHAkjWXImR7K"]] ; Focus song (slow)
                 [:spacebar :!CSOv]]} ; Selection -> Google Images
        {:des "bkey (break)"
         :rules [:b-mode
                 [:9 [:alfred "search hn" "com.vitorgalvao.alfred.hackerboard"]]
                 [:0 [:km "w: HN (show new)"]]
                 [:q [:km "w: KM forum"]]
                 [:w [:km "w: Swift forum"]]
                 [:e [:km "w: Behance"]]
                 [:r [:km "w: Medium (network)"]]
                 [:t [:km "w: Medium (bookmarks)"]]
                 [:u [:km "w: Product Hunt"]]
                 [:i [:km "w: Dribble"]]
                 [:o [:km "w: Pinboard"]]
                 [:p [:km "w: Indie Hackers"]]
                 [:open_bracket [:km "w: Reddit Saved"]]
                 [:close_bracket [:km "w: Twitter Bookmarks"]]
                 [:a [:km "w: HN"]]
                 [:f [:km "w: Reddit (all)"]]
                 [:g [:km "w: Alfred Forum"]]
                 ;[:h [:km "w: Product Hunt (new)"]]
                 ;[:j [:km "w: Reddit (new)"]]
                 ;[:j [:km "w: Reddit (in Safari Tech Preview)"]]
                 ;[:k [:km "w: GitHub (front page)"]]
                 [:h [:km "w: HckrNews"]]
                 [:j [:km "w: HN (new)"]]
                 [:k [:km "w: GitHub (dashboard)"]]
                 [:l [:km "w: Lobsters (new)"]]
                 [:semicolon [:km "w: Reddit"]]
                 [:quote [:km "w: YouTube"]]
                 ;[:l [:km "w: Lobsters"]]
                 ;[:z [:km "w: HN (comments)"]]
                 ;[:x [:km "w: Lobsters (comments)"]]
                 ;[:n [:km "w: Inoreader"]]
                 ;[:m [:km "w: Mastodon"]]
                 [:m [:km "open: Elk"]]
                 [:comma [:km "w: GitHub (trending)"]]
                 ;[:period [:km "w: YouTube (subs)"]]
                 [:period [:km "Get break"]]
                 [:slash [:km "w: GitHub (explore)"]]
                 [:spacebar :!TOSs]]} ; Selection -> DuckDuckGo
        {:des "nkey (alfred)"
         :rules [:n-mode
                 [:1 :!O1]
                 [:2 :!O2]
                 [:3 :!O3]
                 [:4 :!O4]
                 [:5 :!O5]
                 [:6 :!O6]
                 [:q [:alfred "search github" "nikivi.search.the.web"]]
                 [:w [:alfred "search twitter" "nikivi.search.the.web"]]
                 [:e [:alfred "search subs" "net.deanishe.alfred-reddit"]]
                 [:r [:alfred "search reddit" "nikivi.search.the.web"]]
                 [:t [:alfred "ssh" "net.deanishe.alfred-ssh"]]
                 [:a [:alfred "search shares" "nikivi.ask.create.share"]]
                 [:s [:alfred "search websites" "nikivi.web.searches"]]
                 [:d [:alfred "search stack overflow" "net.deanishe.alfred-stackoverflow"]]
                 ;[:d [:alfred "search packages" "com.sindresorhus.npms"]]
                 [:f [:alfred "search repos" "me.lachlan.githubjump"]]
                 [:g [:alfred "search godoc" "nikivi.search.the.web"]]
                 [:h [:alfred "search hn" "nikivi.search.the.web"]]
                 [:grave_accent_and_tilde [:alfred "search learn anything" "nikivi.learn.anything"]]
                 [:z [:alfred "search lobsters" "nikivi.search.the.web"]]
                 [:x [:alfred "search stack" "net.deanishe.alfred-stackoverflow"]]
                 [:c [:alfred "search wiki" "nikivi.mind"]]
                 [:v [:alfred "search links" "nikivi.mind"]]
                 ;[:v [:alfred "search pinboard" "nikivi.search.the.web"]] ; TODO: topics/search/more?
                 [:b [:alfred "search bookmarks" "net.deanishe.alfred.safari"]]
                 [:spacebar [:km "New 2Do task"]]]}
                 ;[:spacebar [:alfred "search history" "net.deanishe.alfred.safari"]]]}
        {:des "mkey (dash)"
         :rules [:m-mode
                 ;[:3 [:alfred "search alfred" "nikivi.utilities" "d3 "]]
                 ;[:q [:alfred "search alfred" "nikivi.utilities" "tldr "]]
                 ;[:w [:alfred "search alfred" "nikivi.utilities" "django "]]
                 ;[:w [:alfred "search alfred" "nikivi.utilities" "ts "]]
                 ;[:e [:alfred "search alfred" "nikivi.utilities" "html "]]
                 ;[:r [:alfred "search alfred" "nikivi.utilities" "react "]]
                 ;[:a [:alfred "search alfred" "nikivi.utilities" "rust "]]
                 ;[:a [:alfred "search alfred" "nikivi.utilities" "man "]]
                 ;[:d [:alfred "search alfred" "nikivi.utilities" "docker "]]
                 ;[:f [:alfred "search alfred" "nikivi.utilities" "apple "]]
                 ;[:s [:alfred "search alfred" "nikivi.utilities" "lodash "]]
                 ;[:d [:alfred "search alfred" "nikivi.utilities" "node "]]
                 ;[:g [:alfred "search alfred" "nikivi.utilities" "godoc "]]
                 ;[:c [:alfred "search alfred" "nikivi.utilities" "css "]]
                 ;[:v [:alfred "search alfred" "nikivi.utilities" "vim "]]
                 ;[:b [:alfred "search alfred" "nikivi.utilities" "bash "]]
                 [:spacebar [:km "New Linear task"]]]}
                 ;[:spacebar :!OSC1]]} ; Open Dash
        {:des "commakey (words)"
         :rules [:comma-mode
                 [:w [:n :i :k :i :v]] ; -> nikiv
                 [:a [:n :i :k :i :t :a :v :o :l :o :b :o :e :v ]]]} ; -> nikitavoloboev
         {:des "dotkey (1-3, q-u, caps, tab)"
          :rules [:dot-mode
                  [:1 [:c :l :o :s :e :spacebar :!S3]] ; -> close #
                  [:2 [:r :e :f :spacebar :!S3]] ; -> ref #
                  [:3 [:f :i :x :spacebar :!S3]] ; -> fix #
                  [:q [:!Sa :spacebar :slash :slash :spacebar]] ; -> // (on same line)
                  [:w [:km "Comment on top of line"]]
                  [:e [:!St :!So :!Sd :!So :!Ssemicolon :spacebar]] ; -> TODO:
                  [:r [:!Sn :!So :!St :!Se :!Ssemicolon :spacebar]] ; -> NOTE:
                  [:caps_lock [:!Cf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: in file
                  [:grave_accent_and_tilde [:!CSf :!St :!So :!Sd :!So :!Ssemicolon :return_or_enter]] ; -> search TODO: globally
                  [:y [:p :l :e :a :s :e :spacebar]] ; -> please
                  [:u [:u :p :d :a :t :e :spacebar]]]} ; -> update
                  ;[:spacebar [:km "paste: Thanks โฅ๏ธ"]]]} ; -> Thanks โฅ๏ธ (TODO: change to something code related and useful)
         {:des "tsdot"
          :rules [:ts-mode
                  ;[:tab [:km "w: MDN"]]
                  ;[:a [:km "console.log()"]]
                  [:tab [:a :s :y :n :c :spacebar :f :u :n :c :t :i :o :n :spacebar]] ; -> async function
                  [:escape [:f :u :n :c :t :i :o :n :spacebar]] ; -> function
                  [:a [:c :o :n :s :o :l :e :period :l :o :g :!S9 :!S0 :left_arrow]] ; -> console.log()
                  ;[:a [:c :o :n :s :o :l :e :period :w :a :r :n :!S9 :!S0 :left_arrow]] ; -> console.warn()
                  [:s [:equal_sign :!Speriod :spacebar]] ; -> =>
                  [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                  [:f [:c :o :n :s :t :spacebar]] ; -> const
                  ;[:f [:!Cf :c :o :n :s :o :l :e :period :w :a :r :n :!S9 :return_or_enter]] ; -> search console.warn( in file
                  [:g [:!Cf :c :o :n :s :o :l :e :period :l :o :g :!S9 :return_or_enter]] ; -> search console.log( in file
                  ;[:g [:right_arrow :spacebar :equal_sign :!Speriod :spacebar :!Sopen_bracket :return_or_enter]] ; -> => {}
                  [:j [:right_arrow :spacebar :equal_sign :spacebar]] ; -> =
                  [:k [:right_arrow :spacebar :!Sopen_bracket :return_or_enter]] ; -> {  }
                  [:grave_accent_and_tilde [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sclose_bracket :left_arrow]] ; -> style={}
                  [:z [:c :o :n :s :o :l :e :period :e :r :r :o :r :!S9 :!S0 :left_arrow]] ; -> console.error()
                  [:x [:p :r :o :c :e :s :s :period :e :n :v :period]] ; -> process.env.
                  ;[:c [:spacebar :s :t :y :l :e :equal_sign :!Sopen_bracket :!Sopen_bracket :!Sclose_bracket :!Sclose_bracket :left_arrow :left_arrow]] ; -> style={{}}
                  ;[:c [:spacebar :c :l :a :s :s :!Sn :a :m :e :equal_sign :!Squote :!Squote :left_arrow]] ; -> className=""
                  [:c [:spacebar :c :l :a :s :s :equal_sign :!Squote :!Squote :left_arrow]] ; -> class=""
                  [:v [:j :a :v :a :s :c :r :i :p :t :spacebar]] ; -> javascript
                  [:b [:t :y :p :e :s :c :r :i :p :t :spacebar]] ; -> typescript
                  [:spacebar [:a :w :a :i :t :spacebar]]]} ; -> await
        {:des "godot"
         :rules [:go-mode
                [:tab [:km "w: GoDoc"]]
                [:a [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> fmt.Println()
                [:s [:!Ssemicolon :equal_sign :spacebar]] ; -> :=
                [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                [:f [:!Cf :f :m :t :period :p :return_or_enter]] ; -> search fmt.p in file
                [:g [:i :f :spacebar :e :r :r :spacebar :!S1 :equal_sign :spacebar :n :i :l :spacebar :!Sopen_bracket :return_or_enter]] ; -> if err != nil {}
                [:j [:grave_accent_and_tilde :j :s :o :n :!Ssemicolon :!Squote :!Squote :grave_accent_and_tilde :left_arrow :left_arrow]] ; -> `json:""`
                [:z [:l :o :g :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow]] ; -> log.Println()
                [:x [:f :m :t :period :!Sp :r :i :n :t :l :n :!S9 :!S0 :left_arrow :!Squote :hyphen :hyphen]] ; -> fmt.Println("--")
                [:c [:!STsemicolon]] ; Selection -> Go Playground
                [:v [:g :o :l :a :n :g :spacebar]] ; -> golang
                [:b [:l :o :g :period :!Sf :a :t :a :l :!S9 :e :r :r :!S0]]]} ; -> log.Fatal(err)
        {:des "pydot"
          :rules [:py-mode
                 [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                 [:s [:hyphen :!Speriod]] ; -> ->
                 [:d [:r :e :t :u :r :n :spacebar]] ; -> return
                 [:v [:p :y :t :h :o :n :spacebar]]]} ; -> python
        {:des "swiftdot"
         :rules [:swift-mode
                [:a [:p :r :i :n :t :!S9 :!S0 :left_arrow]] ; -> print()
                [:v [:s :w :i :f :t :spacebar]]]} ; -> swift
        {:des "rustdot"
          :rules [:rust-mode
                 [:a [:l :o :g :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow]] ; -> log!();
                 ;[:a [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow :!Squote :!Sopen_bracket :!Sclose_bracket :right_arrow :comma :spacebar]] ; -> println!("{}", )
                 [:s [:a :s :s :e :r :t :!Shyphen :e :q :!S1 :!S9]] ; assert_eq!();
                 [:d [:hyphen :!Speriod :spacebar]] ; ->
                 [:f [:p :r :i :n :t :l :n :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow :!Squote :!Sopen_bracket :!Ssemicolon :!Sslash :!Sclose_bracket :right_arrow :comma :spacebar]] ; -> println!("{:?}", );
                 ;[:f [:l :o :g :!S1 :!S9 :!S0 :semicolon :left_arrow :left_arrow]] ; -> log!();
                 [:v [:r :u :s :t :spacebar]]]} ; -> rust
        {:des "spacekey"
         :rules [:spacebar-mode
                 ;[:tab :!CO5] ; TODO: Configure ScreenFlow recording
                 [:1 :!TOSq] ; Screenshot and recording options (system settings > keyboard > screenshots)
                 [:2 :!TOS9] ; Copy picture of screen to the clipboard (system settings > keyboard > screenshots)
                 [:3 :!CS3] ; Save picture of screen as a file (~/Desktop) (system settings > keyboard > screenshots)
                 [:q [:km "open: CleanShot"]]
                 [:w :!TO3] ; Screenshot -> CleanShot
                 [:e :!TO2] ; Copy picture of selected area to the clipboard (system settings > keyboard > screenshots)
                 [:r :!CS4] ; Save picture of selected area as a file (~/Desktop) (system settings > keyboard > screenshots)
                 [:t [:km "w: Twitter (personal)"]]
                 ;[:t [:km "w: YouTube submit"]]
                 ;[:t :!TOCp] ; Screenshot -> Imgur
                 ;[:t :!TOCp] ; Screenshot -> Imgur (auth)
                 ;[:t :!COS4] ; Screenshot -> CleanShot (cloud)
                 ;[:i [:km "w: Google Sheets"]]
                 ;[:o [:km "w: Google Docs"]]
                 ;[:o [:km "open: GraphQL"]]
                 ;[:i [:km "Midjourney Imagine"]]
                 ;[:o [:km "w: Stack Overflow question"]]
                 ;[:p [:km "w: CodePen New"]]
                 ;[:open_bracket [:km "w: Google Slides"]]
                 ;[:close_bracket [:km "w: Beautiful.ai"]]
                 ;[:a [:km "OBS stream scene on"]]
                 ;[:s [:km "OBS stream scene off"]]
                 ;[:s [:t :h :a :n :k :s]] ; -> thanks
                 ;[:escape :!CTOSi] ; Screen Studio (record entire display)
                 [:tab [:km "Start Screen Studio (record entire display)"]]
                 [:escape [:km "New tweet with clipboard (image or text)"]]
                 [:a :!CS8] ; Screenshot -> Pixave
                 [:s :!CTOSg] ; Screen Studio recording
                 ;[:s :!CTOSg] ; Loom recording
                 ;[:f :!CTOS7] ; Screen Studio area recording
                 [:f :!CS9] ; CleanShot screen recording
                 ;[:a :!CTOSi] ; OBS stream scene on
                 ;[:s :!CTOSo] ; OBS stream scene off
                 ;[:a :!TO4] ; CleanShot recording
                 ;[:s :!CO5] ; TODO: Pause/unpause ScreenFlow recording
                 ;[:f [:km "open: ChatGPT"]]
                 ;[:f [:km "Copy text to ChatGPT"]]
                 [:g [:km "web: GitHub (personal)"]]
                 [:h [:km "web: GitHub Learn Anything"]]
                 ;[:g :!CO5] ; Start/stop ScreenFlow recording
                 ;[:h [:km "w: Roam Research"]]
                 ;[:j [:km "open: Typefully"]] ; or start writing tweet
                 ;[:j [:km "open: ChatGPT"]]
                 ;[:h [:km "w: GitHub (notifications)"]] ; TODO: jump between GitHub (issues/prs)
                 ;[:h [:km "w: HN submit"]]
                 ;[:k :!COS9] ; Raycast
                 ;[:k [:open "raycast://extensions/loris/safari/cloud-tabs"]] ; TODO: improve on it, slow
                 [:i [:open "raycast://extensions/loris/safari/search-history"]]
                 [:o [:open "raycast://extensions/loris/safari/search-bookmarks"]] ; TODO: bind to LA bookmarks
                 [:j :!CTO0] ; Search Alfred Snippets
                 [:k :!TSC0] ; Raycast: Search open tabs TODO: fix wrong safari tab from showing up TODO: combine it with LA bookmarks? all in one thing?
                 ;[:l [:alfred "search" "com.renfei.SnippetsLab.AlfredWorkflow"]]
                 [:l [:km "open: Dash (with search)"]]
                 [:n [:km "New tweet"]] ; TODO: can be generic `LA Post` function later maybe or have another bind for `LA Post`
                 [:m [:km "w: Reddit submit"]]
                 [:semicolon :!Cgrave_accent_and_tilde] ; Switch between active windows (go down)
                 [:period [:km "open: Safari Technology Preview"]]
                 ;[:n [:km "New tweet with @"]]
                 ;[:m [:km "New tweet with current URL"]]
                 ;[:l [:km "New LA post"]]
                 ;[:k [:km "w: GitHub"]]
                 ;[:l [:km "w: Localhost"]]
                 ;[:l [:km "w: Learn Anything"]]
                 ;[:semicolon :semicolon]
                 ;[:semicolon [:km "w: StackBlitz"]]
                 ;[:semicolon ["~/.kit/kar Test"]]
                 ;[:b [:km "w: Digital Ocean"]]
                 ;[:n [:km "w: GCP"]]
                 ;[:m [:km "w: AWS"]]
                 ;[:comma [:km "w: Diagrams"]]
                 ;[:n [:km "New 2Do task"]]
                 ;[:m [:km "New Linear task"]]
                 [:b [:km "w: Lobsters submit"]]
                 ;[:m [:km "New Mastodon post"]]
                 [:slash [:km "w: GitHub PR"]]]} ; TODO:
        ;{:des "left cmd -> cmd+tab"
         ;:rules [[:left_command :left_command nil {:alone :!Ctab}]]}
]}